// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/contracts.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/contracts.go -package=usecase -destination=./internal/usecase/mocks/mock.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	order "taskL0/internal/entity/order"

	gomock "go.uber.org/mock/gomock"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
	isgomock struct{}
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockOrder) GetCache() []order.OrderInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache")
	ret0, _ := ret[0].([]order.OrderInfo)
	return ret0
}

// GetCache indicates an expected call of GetCache.
func (mr *MockOrderMockRecorder) GetCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockOrder)(nil).GetCache))
}

// GetInfo mocks base method.
func (m *MockOrder) GetInfo(ctx context.Context, orderUID order.OrderUID) (order.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, orderUID)
	ret0, _ := ret[0].(order.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockOrderMockRecorder) GetInfo(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockOrder)(nil).GetInfo), ctx, orderUID)
}

// HandleOrder mocks base method.
func (m *MockOrder) HandleOrder(ctx context.Context, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOrder", ctx, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOrder indicates an expected call of HandleOrder.
func (mr *MockOrderMockRecorder) HandleOrder(ctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOrder", reflect.TypeOf((*MockOrder)(nil).HandleOrder), ctx, value)
}

// MockCacheLoader is a mock of CacheLoader interface.
type MockCacheLoader struct {
	ctrl     *gomock.Controller
	recorder *MockCacheLoaderMockRecorder
	isgomock struct{}
}

// MockCacheLoaderMockRecorder is the mock recorder for MockCacheLoader.
type MockCacheLoaderMockRecorder struct {
	mock *MockCacheLoader
}

// NewMockCacheLoader creates a new mock instance.
func NewMockCacheLoader(ctrl *gomock.Controller) *MockCacheLoader {
	mock := &MockCacheLoader{ctrl: ctrl}
	mock.recorder = &MockCacheLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheLoader) EXPECT() *MockCacheLoaderMockRecorder {
	return m.recorder
}

// WarmUp mocks base method.
func (m *MockCacheLoader) WarmUp(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmUp", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WarmUp indicates an expected call of WarmUp.
func (mr *MockCacheLoaderMockRecorder) WarmUp(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmUp", reflect.TypeOf((*MockCacheLoader)(nil).WarmUp), ctx)
}
