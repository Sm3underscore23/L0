// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/contracts.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/contracts.go -package=mock_repository -destination=./internal/repository/mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	order "taskL0/internal/entity/order"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
	isgomock struct{}
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepo) Create(ctx context.Context, orderInfo order.OrderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, orderInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepoMockRecorder) Create(ctx, orderInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepo)(nil).Create), ctx, orderInfo)
}

// GetInfo mocks base method.
func (m *MockOrderRepo) GetInfo(ctx context.Context, orderUID order.OrderUID) (order.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, orderUID)
	ret0, _ := ret[0].(order.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockOrderRepoMockRecorder) GetInfo(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockOrderRepo)(nil).GetInfo), ctx, orderUID)
}

// GetLastsOrders mocks base method.
func (m *MockOrderRepo) GetLastsOrders(ctx context.Context, limitRecover int) ([]order.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastsOrders", ctx, limitRecover)
	ret0, _ := ret[0].([]order.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastsOrders indicates an expected call of GetLastsOrders.
func (mr *MockOrderRepoMockRecorder) GetLastsOrders(ctx, limitRecover any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastsOrders", reflect.TypeOf((*MockOrderRepo)(nil).GetLastsOrders), ctx, limitRecover)
}

// IsExists mocks base method.
func (m *MockOrderRepo) IsExists(ctx context.Context, orderUID order.OrderUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", ctx, orderUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockOrderRepoMockRecorder) IsExists(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockOrderRepo)(nil).IsExists), ctx, orderUID)
}
